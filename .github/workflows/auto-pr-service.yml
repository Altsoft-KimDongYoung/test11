name: Auto PR for ondaji service changes

on:
  push:
    branches:
      - main
    paths:
      - "src/service/ondaji/**"

permissions:
  contents: write

jobs:
  auto-pr-service:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 전체 커밋 이력을 가져옵니다.
          token: ${{ secrets.ACCESS_TOKEN }} # PAT 사용

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add ondaji-service remote if not exists
        run: |
          if ! git remote | grep -q ondaji-service; then
            git remote add ondaji-service https://x-access-token:${{ secrets.ACCESS_TOKEN }}@github.com/altsoft5472344/ondaji_4gen_front_service.git
          fi

      - name: Check for changes in ondaji-service
        id: check_changes
        run: |
          # 이전 commit과 현재 commit 간의 변경사항을 확인합니다.
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q '^src/service/ondaji/'; then
            echo "Detected file changes in src/service/ondaji."
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "No file changes in src/service/ondaji."
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create branch and push subtree if changes exist
        if: steps.check_changes.outputs.changes == 'true'
        run: |


          echo "현재 레포지토리: ${{ github.repository }}"
          git remote -v

          git branch -a

          git fetch origin main

          git checkout main
          git log --oneline

          # 고유한 브랜치 이름 생성 (예: auto-ondaji-service-타임스탬프)
          BRANCH="auto-ondaji-service-$(date +%s)"
          echo "Creating branch $BRANCH"

          echo "콘솔 1"
          # 지정한 폴더(src/service/ondaji)에 대한 subtree split을 수행하여 임시 브랜치 생성
          TEMP_BRANCH="temp-branch-name"
          git subtree split --prefix=src/service/ondaji -b $TEMP_BRANCH

          echo "콘솔 2"
          # 생성된 subtree split 커밋 해시 확인
          COMMIT_HASH=$(git rev-parse $TEMP_BRANCH)
          echo "생성된 subtree split 커밋: $COMMIT_HASH"

          echo "콘솔 3"
          # 원격에 등록할 고유 브랜치 이름 생성 (예: auto-ondaji-service-타임스탬프)
          NEW_BRANCH="test8"
          echo "원격에 생성할 브랜치: $NEW_BRANCH"

          echo "콘솔 4"
          # 임시 브랜치를 원격 저장소(ondaji-service)에 push (원격 브랜치명은 NEW_BRANCH로 설정)
          git push ondaji-service $TEMP_BRANCH:$NEW_BRANCH --force

          # 작업 후 로컬 임시 브랜치 삭제 (선택사항)
          git branch -D $TEMP_BRANCH

      - name: Install GitHub CLI
        if: steps.check_changes.outputs.changes == 'true'
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Create Pull Request using GitHub CLI
        if: steps.check_changes.outputs.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          set -x  # 디버그 모드 활성화 (실행되는 명령어들이 출력됩니다)


          echo "현재 레포지토리: ${{ github.repository }}"
          git remote -v

          BRANCH="test8"
          echo "현재 브랜치: $BRANCH"

          git fetch ondaji-service main

          git branch -a 

          CHANGED_FILES=$(git diff ondaji-service/main..ondaji-service/test8 --name-only --)
          echo "변경된 파일 목록: $CHANGED_FILES"

          git log ondaji-service/main..ondaji-service/test8 --oneline --graph

          if [ -z "$CHANGED_FILES" ]; then
            echo "ondaji-service/main과 $BRANCH 간에 내 변경된 파일이 없음."
            exit 0
          else
            COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
            echo "전체 커밋 메시지: $COMMIT_MESSAGE"
            
            COMMIT_TITLE=$(echo "$COMMIT_MESSAGE" | head -n 1 | sed -E 's/[[:space:]]*\(\#[0-9]+\)//g')
            echo "PR 타이틀 (첫 줄에서 (#숫자) 제거): $COMMIT_TITLE"
            
            COMMIT_URL="${{ github.event.head_commit.url }}"
            COMMIT_AUTHOR="${{ github.event.head_commit.author.name }}"
            
            BODY="커밋 메시지: ${COMMIT_TITLE}\n커밋 URL: ${COMMIT_URL}\n커밋 작성자: @${COMMIT_AUTHOR}"
            echo "PR 본문: $BODY"
            
            gh pr create --title "${COMMIT_TITLE}" \
                        --body "$BODY" \
                        --base main --head $BRANCH
          fi
