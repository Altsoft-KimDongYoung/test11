name: Auto PR for ondaji service changes

on:
  push:
    branches:
      - main
    paths:
      - "src/service/ondaji/**"

permissions:
  contents: write

jobs:
  auto-pr-service:
    runs-on: ubuntu-latest

    steps:
      # A 레포에서 일반적인 작업: 체크아웃, Git 설정, ondaji-service 원격 추가, 변경 감지 등은 여기서 실행
      - name: Checkout repository (A repo)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Set up Git in A repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add ondaji-service remote if not exists
        run: |
          if ! git remote | grep -q ondaji-service; then
            git remote add ondaji-service https://x-access-token:${{ secrets.ACCESS_TOKEN }}@github.com/altsoft5472344/ondaji_4gen_front_service.git
          fi

      - name: Check for changes in ondaji-service
        id: check_changes
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q '^src/service/ondaji/'; then
            echo "Detected file changes in src/service/ondaji."
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "No file changes in src/service/ondaji."
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      # 여기까지는 A 레포에서 실행됨.
      # 이제 B 레포(altsoft5472344/ondaji_4gen_front_service)를 클론하여 PR 생성 작업을 진행합니다.
      - name: Checkout B repository
        if: steps.check_changes.outputs.changes == 'true'
        uses: actions/checkout@v3
        with:
          repository: altsoft5472344/ondaji_4gen_front_service
          token: ${{ secrets.ACCESS_TOKEN }} # B 레포 접근용 별도 토큰
          fetch-depth: 0
          path: b-repo

      - name: Set up Git in B repo
        if: steps.check_changes.outputs.changes == 'true'
        working-directory: b-repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Pull Request using GitHub CLI in B repo
        if: steps.check_changes.outputs.changes == 'true'
        working-directory: b-repo
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          set -x  # 디버그 모드 활성화
          echo "현재 레포지토리 (B repo):"
          git remote -v
          git branch -a

          # PR 생성 대상 브랜치 이름 (예시: test9, 실제 작업에 맞게 수정)
          PR_BRANCH="test9"
          echo "PR 대상 브랜치: $PR_BRANCH"

          # 최신 상태로 origin의 main 브랜치와 PR_BRANCH를 fetch
          git fetch origin main
          git fetch origin $PR_BRANCH

          # 변경 사항 확인: origin/main과 PR_BRANCH 간 변경 파일 목록
          CHANGED_FILES=$(git diff origin/main..$PR_BRANCH --name-only --)
          echo "변경된 파일 목록: $CHANGED_FILES"
          git log origin/main..$PR_BRANCH --oneline --graph

          if [ -z "$CHANGED_FILES" ]; then
            echo "origin/main과 $PR_BRANCH 간에 변경된 파일이 없음."
            exit 0
          else
            # 예시: 커밋 메시지 대신 고정 텍스트 사용 (실제 상황에 맞게 조정)
            COMMIT_MESSAGE="자동 생성된 PR"
            echo "전체 커밋 메시지: $COMMIT_MESSAGE"
            COMMIT_TITLE=$(echo "$COMMIT_MESSAGE" | head -n 1 | sed -E 's/[[:space:]]*\(\#[0-9]+\)//g')
            echo "PR 타이틀: $COMMIT_TITLE"
            BODY="자동 생성된 PR입니다."
            echo "PR 본문: $BODY"
            # PR 생성: 기준 브랜치는 main, 대상은 PR_BRANCH (로컬 브랜치 이름)
            gh pr create --title "${COMMIT_TITLE}" \
                         --body "$BODY" \
                         --base main --head $PR_BRANCH
          fi
