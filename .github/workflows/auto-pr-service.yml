name: Auto PR for ondaji service changes

on:
  push:
    branches:
      - main
    paths:
      - "src/service/ondaji/**"

# PR 생성 작업을 할 수 있도록 쓰기 작업을 허용합니다.
permissions:
  contents: write

jobs:
  auto-pr-service:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 전체 커밋 기록과 함께 체크아웃
          token: ${{ secrets.ACCESS_TOKEN }} # Personal Access Token 사용

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 공통 모듈 리모트가 없으면 추가
      - name: Add ondaji-service remote if not exists
        run: |
          if ! git remote | grep -q ondaji-service; then
            git remote add ondaji-service https://x-access-token:${{ secrets.ACCESS_TOKEN }}@github.com/altsoft5472344/ondaji_4gen_front_service.git
          fi

      # 변경된 파일이 있는지 확인 check_changes.outputs.changes 변수에 저장
      - name: Check for changes in ondaji-service
        id: check_changes
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q '^src/service/ondaji/'; then
            echo "Detected file changes in src/service/ondaji."
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "No file changes in src/service/ondaji."
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create branch and push subtree if changes exist
        if: steps.check_changes.outputs.changes == 'true'
        id: create_branch
        run: |
          echo "현재 레포지토리: ${{ github.repository }}"
          git remote -v
          git branch -a

          # origin의 최신 main 브랜치를 업데이트 및 체크아웃
          git fetch origin main
          git checkout -B main origin/main

          # 고유한 로컬 브랜치 이름 생성 (예: auto-ondaji-service-타임스탬프)
          LOCAL_BRANCH="auto-ondaji-service-$(date +%s)"
          echo "Creating local branch: $LOCAL_BRANCH"
          git checkout -b $LOCAL_BRANCH

          # git subtree split 명령어를 사용하여 공통모듈 디렉토리의 커밋 내역만 분리해 별도의 임시 브랜치를 생성합니다.
          TEMP_BRANCH="temp-branch-$(date +%s)"
          git subtree split --prefix=src/service/ondaji -b $TEMP_BRANCH

          # 원격에 등록할 브랜치 이름을 로컬 브랜치 이름과 동일하게 설정
          REMOTE_BRANCH="$LOCAL_BRANCH"
          echo "원격에 생성할 브랜치: $REMOTE_BRANCH"

          # 원격에 임시 브랜치 push
          # $TEMP_BRANCH 브랜치 내용을 원격 저장소의 $REMOTE_BRANCH 브랜치로 푸시
          git push ondaji-service $TEMP_BRANCH:$REMOTE_BRANCH --force

          # 작업 후 로컬 임시 브랜치 삭제 
          git branch -D $TEMP_BRANCH

          # 생성한 로컬 브랜치 이름을 output 변수로 설정하여 이후 단계에서 사용할 수 있도록 합니다.
          echo "::set-output name=local_branch::$LOCAL_BRANCH"

      - name: Install GitHub CLI
        if: steps.check_changes.outputs.changes == 'true'
        run: sudo apt-get update && sudo apt-get install -y gh

      # 여기까지는 소비자 레포에서 실행됨.
      # 이제 공통 모듈 레포(altsoft5472344/ondaji_4gen_front_service)를 클론하여 PR 생성 작업을 진행합니다.
      - name: Checkout service repository
        if: steps.check_changes.outputs.changes == 'true'
        uses: actions/checkout@v3
        with:
          repository: altsoft5472344/ondaji_4gen_front_service
          token: ${{ secrets.ACCESS_TOKEN }}
          fetch-depth: 0
          path: constants-repo

      - name: Set up Git in constants repository
        if: steps.check_changes.outputs.changes == 'true'
        working-directory: constants-repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Pull Request using GitHub CLI in constants repository
        if: steps.check_changes.outputs.changes == 'true'
        working-directory: constants-repo
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          set -x  # 디버그 모드 활성화
          echo "현재 레포지토리: ${{ github.repository }}"

          git remote -v
          git branch -a

          # 이전 단계에서 생성한 브랜치 이름을 가져옵니다.
          PR_BRANCH="${{ steps.create_branch.outputs.local_branch }}"

          git checkout main
          git pull
          git checkout $PR_BRANCH
          git pull

          CHANGED_FILES=$(git diff main..$PR_BRANCH --name-only --)
          echo "변경된 파일 목록: $CHANGED_FILES"
          git log main..$PR_BRANCH --oneline --graph

          if [ -z "$CHANGED_FILES" ]; then
            echo "main과 $PR_BRANCH 간에 변경된 파일이 없음."
            exit 0
          else
            COMMIT_MESSAGE="${{ github.event.head_commit.message }}"

            # PR 타이틀 (첫 줄에서 (#숫자) 제거)
            COMMIT_TITLE=$(echo "$COMMIT_MESSAGE" | head -n 1 | sed -E 's/[[:space:]]*\(\#[0-9]+\)//g')
            COMMIT_URL="${{ github.event.head_commit.url }}"
            COMMIT_AUTHOR="${{ github.event.head_commit.author.name }}"
            BODY="커밋 메시지: ${COMMIT_TITLE}
            커밋 URL: ${COMMIT_URL}
            커밋 작성자: @${COMMIT_AUTHOR}"
            gh pr create --title "${COMMIT_TITLE}" \
                         --body "$BODY" \
                         --base main --head $PR_BRANCH
          fi
